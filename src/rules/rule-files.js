import standardConfig from 'eslint-config-standard'
import jsxConfig from 'eslint-config-standard-jsx'
import reactConfig from 'eslint-config-standard-react'
import typescriptConfig from 'eslint-config-standard-with-typescript'
import reactHooksPlugin from 'eslint-plugin-react-hooks'

import packageJson from '../../package.json'
import { removeProps, sortJson, splitArray, splitObject } from '../utils.js'
import { filterStyleRules } from './style-rules.js'

const hooksConfig = reactHooksPlugin.configs.recommended

/**
 * Generate a single eslint config file.
 */
function makeFile(info) {
  const { comment, upstream, config } = info
  return (
    `// ${comment}\n` +
    '//\n' +
    `// Auto-generated by ${packageJson.name}\n` +
    `// based on rules from ${upstream}\n` +
    '\n' +
    '"use strict";\n' +
    '\n' +
    `module.exports = ${JSON.stringify(sortJson(config), null, 2)};\n`
  )
}

/**
 * Generates a pair of eslint config files (with and without style rules).
 */
async function makeFilePair(out, name, info) {
  const { comment, upstream, config } = info

  // Make normal version:
  out[`config/${name}.js`] = makeFile({
    comment: `${comment} for Standard.js`,
    upstream,
    config
  })

  // Make `prettier` version:
  out[`prettier/${name}.js`] = makeFile({
    comment: `${comment} for Standard.js + Prettier`,
    upstream,
    config: filterStyleRules(config)
  })
}

/**
 * Generates all the eslint config files in this package.
 */
function makeFiles() {
  const out = {}
  const isNode = rule => /^node/.test(rule)
  const splitNodeEnv = splitObject(standardConfig.env, isNode)
  const splitNodePlugins = splitArray(standardConfig.plugins, isNode)
  const splitNodeRules = splitObject(standardConfig.rules, isNode)

  const coreConfig = {
    ...standardConfig,
    env: splitNodeEnv.no,
    globals: {
      clearInterval: 'readonly',
      clearTimeout: 'readonly',
      console: 'readonly',
      setInterval: 'readonly',
      setTimeout: 'readonly',
      ...standardConfig.globals
    },
    plugins: splitNodePlugins.no,
    rules: splitNodeRules.no
  }
  const coreLintConfig = filterStyleRules(coreConfig)

  out['config/index.js'] = makeFile({
    comment: 'Core rules for Standard.js',
    upstream: 'eslint-config-standard',
    config: coreConfig
  })

  out['prettier/index.js'] = makeFile({
    comment: 'Core rules for Standard.js + Prettier',
    upstream: 'eslint-config-standard',
    config: {
      ...coreLintConfig,
      plugins: [...coreLintConfig.plugins, 'prettier'],
      rules: {
        ...coreLintConfig.rules,
        'prettier/prettier': [
          'error',
          {
            arrowParens: 'avoid',
            semi: false,
            singleQuote: true,
            trailingComma: 'none'
          }
        ]
      }
    }
  })

  makeFilePair(out, 'jsx', {
    comment: 'JSX support',
    upstream: 'eslint-config-standard-jsx',
    config: jsxConfig
  })

  makeFilePair(out, 'typescript', {
    comment: 'Typescript language support',
    upstream: 'eslint-config-standard-with-typescript',
    config: {
      ...removeProps(typescriptConfig, ['extends'])
    }
  })

  makeFilePair(out, 'node', {
    comment: 'Node.js support',
    upstream: 'eslint-config-standard',
    config: {
      env: splitNodeEnv.yes,
      plugins: splitNodePlugins.yes,
      rules: splitNodeRules.yes
    }
  })

  makeFilePair(out, 'react', {
    comment: 'React support',
    upstream: 'eslint-config-standard-react & eslint-plugin-react-hooks',
    config: {
      ...reactConfig,
      plugins: [...reactConfig.plugins, ...hooksConfig.plugins],
      rules: {
        ...reactConfig.rules,
        ...hooksConfig.rules
      }
    }
  })

  return out
}

export const ruleFiles = makeFiles()
